{"version":3,"sources":["contexts/stores.ts","component/TodoFooter/TodoFooter.tsx","component/TodoItem/TodoItem.tsx","component/TodoList/TodoList.tsx","component/TodoToggleAllButton/TodoToggleAllButton.tsx","component/TodoContent/TodoContent.tsx","component/TodoHeader/TodoHeader.tsx","component/TodoInput/TodoInput.tsx","component/TodoApp/TodoApp.tsx","stores/TodoStore.tsx","stores/RootStore.tsx","index.tsx"],"names":["StoreContext","React","createContext","undefined","observer","store","todoStore","getLeftItems","removeCompletedContent","leftItems","count","tagDescription","makeTodoCountTag","className","href","onClick","itemElement","id","content","checked","onClickHandler","editContent","useState","editStatus","setEditStatus","itemContent","setItemContent","classNames","edit","type","autoFocus","value","onChange","e","target","onBlur","prev","onKeyDown","code","readOnly","onDoubleClick","completed","editing","todoList","map","toggleAllCheck","selectedTodolist","checkToggleAll","setCheckToggleAll","htmlFor","toggleCheck","removeContent","window","location","pathname","filter","item","todoListFilter","currentTarget","classList","contains","rootStore","setContent","addContent","keyCode","placeholder","useContext","TodoStore","increaseId","getLocalStorage","JSON","parse","localStorage","getItem","setLocalStorage","setItem","stringify","length","push","targetId","findIndex","v","checkId","check","includes","removeTodoItem","splice","this","makeObservable","observable","action","RootStore","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"qJAKeA,EAFMC,IAAMC,mBAAqCC,G,OC2CjDC,eA/BI,SAAC,GAAqE,IAAD,IAAlEC,MACuCC,UAAnDC,EAD8E,EAC9EA,aAAcC,EADgE,EAChEA,uBAChBC,EAbiB,SAACC,GACxB,IAAMC,EAAiBD,EAAQ,EAAI,cAAgB,aAEnD,OACE,qCACE,iCAASA,IACRC,KAOaC,CAAiBL,KAEnC,OACE,yBAAQM,UAAU,SAAlB,UACE,sBAAMA,UAAU,aAAhB,SAA8BJ,IAC9B,qBAAII,UAAU,UAAd,UACE,6BACE,mBAAGC,KAAK,IAAID,UAAW,MAAvB,mBAGI,IACN,6BACE,mBAAGC,KAAK,UAAUD,UAAW,SAA7B,sBAGI,IACN,6BACE,mBAAGC,KAAK,aAAaD,UAAW,YAAhC,4BAKJ,wBAAQA,UAAU,kBAAkBE,QAASP,EAA7C,mC,uBCoBSJ,mBAtDf,YAAyG,IAGnGY,EAHcC,EAAoF,EAApFA,GAAIC,EAAgF,EAAhFA,QAASC,EAAuE,EAAvEA,QAASC,EAA8D,EAA9DA,eAAgBC,EAA8C,EAA9CA,YAA8C,EAClEC,oBAAS,GADyD,mBAC/FC,EAD+F,KACnFC,EADmF,OAEhEF,mBAASJ,GAFuD,mBAE/FO,EAF+F,KAElFC,EAFkF,KA+CtG,OArBEV,EADEO,EAEA,uBACEV,UAAWc,IAAW,CAAEC,KAAML,IAC9BM,KAAK,OACLC,WAAW,EACXC,MAAON,EACPO,SAvBkB,SAACC,GAA4C,IAAD,EAClEP,EAAc,UAACO,EAAEC,cAAH,aAAC,EAAUH,QAuBrBI,OApBgB,WACpBX,GAAc,SAACY,GAAD,OAAWA,KACzBf,EAAYJ,EAAIQ,IAmBZY,UAhBmB,SAACJ,GACR,WAAX,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGK,QACLd,GAAc,SAACY,GAAD,OAAWA,KACzBf,EAAYJ,EAAIQ,OAkBhB,sBAAKZ,UAAU,OAAf,UACE,uBAAOA,UAAU,SAASgB,KAAK,WAAWV,QAASA,EAASoB,UAAQ,IACpE,uBAAOC,cApCgB,WAC3BhB,GAAc,SAACY,GAAD,OAAWA,MAmCrB,SAA6ClB,IAC7C,wBAAQL,UAAU,eAMtB,oBAAIA,UAAWc,IAAW,CAAEc,UAAWtB,GAAW,CAAEuB,QAASnB,IAAeR,QAAS,SAACkB,GAAD,OAAOb,EAAea,EAAGhB,IAA9G,SACGD,OC3BQZ,eArBE,SAAC,GAA8E,IAA5EuC,EAA2E,EAA3EA,SAAUvB,EAAiE,EAAjEA,eAAgBC,EAAiD,EAAjDA,YAC5C,OACE,mCACE,oBAAIR,UAAU,YAAd,SACG8B,EAASC,KAAI,YAA+B,IAA5B3B,EAA2B,EAA3BA,GAAIC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC5B,OACE,cAAC,EAAD,CAEEF,GAAIA,EACJC,QAASA,EACTC,QAASA,EACTC,eAAgBA,EAChBC,YAAaA,GALRJ,aCmBJb,eA5Ba,SAAC,GAMF,IALzByC,EAKwB,EALxBA,eACAC,EAIwB,EAJxBA,iBAIwB,EACoBxB,oBAAkB,GADtC,mBACjByB,EADiB,KACDC,EADC,KAOxB,OACE,qCACE,uBACE/B,GAAG,aACHJ,UAAU,aACVgB,KAAK,WACLV,QAAS4B,EACTf,SAZmB,WACvBgB,GAAkB,SAACZ,GAAD,OAAWA,KAC7BS,EAAeE,EAAgBD,MAa7B,uBAAOG,QAAQ,aAAf,wCCkBS7C,eAvBK,SAAC,GAAqE,IAAD,IAAlEC,MACmEC,UAAhFqC,EAD+E,EAC/EA,SAAUO,EADqE,EACrEA,YAAaC,EADwD,EACxDA,cAAeN,EADyC,EACzCA,eAAgBxB,EADyB,EACzBA,YACxDyB,EAjBe,SAACH,GACtB,IACMG,EAAmBH,EAEzB,OAHiBS,OAAOC,SAASC,UAI/B,IAAK,IACH,OAAOR,EACT,IAAK,UACH,OAAOA,EAAiBS,QAAO,SAACC,GAAD,OAA2B,IAAjBA,EAAKrC,WAChD,IAAK,aACH,OAAO2B,EAAiBS,QAAO,SAACC,GAAD,OAA2B,IAAjBA,EAAKrC,WAElD,OAAO2B,EAKkBW,CAAed,GAaxC,OACE,uBAAM9B,UAAU,OAAhB,UACE,cAAC,EAAD,CAAqBgC,eAAgBA,EAAgBC,iBAAkBA,IACvE,cAAC,EAAD,CAAUH,SAAUG,EAAkB1B,eAdnB,SAACa,EAAqBhB,GAC3C,IAAMyC,EAAgBzB,EAAEC,OAEpBwB,EAAcC,UAAUC,SAAS,WACnCV,EAAYjC,GAEVyC,EAAcC,UAAUC,SAAS,YACnCT,EAAclC,IAOwDI,YAAaA,UC7B1EjB,mBARf,WACE,OACE,wBAAQS,UAAU,SAAlB,SACE,4CCyBST,mBA3Bf,YAAqF,IAAzDyD,EAAwD,EAA/DxD,MAA+D,EACpDiB,mBAAS,IAD2C,mBAC3EJ,EAD2E,KAClE4C,EADkE,KAE1EC,EAAeF,EAAUvD,UAAzByD,WAaR,OACE,uBACElD,UAAU,WACVgB,KAAK,OACLE,MAAOb,EACPc,SAhBoB,SAACC,GACvB6B,EAAW7B,EAAEC,OAAOH,QAgBlBM,UAbqB,SAACJ,GACN,KAAdA,EAAE+B,UACJD,EAAW7C,GACX4C,EAAW,MAWXG,YAAY,8BCFH7D,mBAbf,WACE,IAAMyD,EAAwBK,qBAAWlE,GAEzC,OACE,oCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWK,MAAOwD,IAClB,cAAC,EAAD,CAAUxD,MAAOwD,IACjB,cAAC,EAAD,CAAYxD,MAAOwD,U,mCC0EVM,EApFb,WAAYN,GAAwB,IAAD,gCAJnCA,eAImC,OAHnClB,cAGmC,OAFnCyB,gBAEmC,OAgB3BC,gBAAkB,WACxB,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,cAjBN,KAoB3BC,gBAAkB,WACxBF,aAAaG,QAAQ,WAAYL,KAAKM,UAAU,CAAEjC,SAAU,EAAKA,SAAUyB,WAAY,EAAKA,eArB3D,KAwBnC7D,aAAe,WACb,OAAO,EAAKoC,SAASY,QAAO,SAACC,GAAD,OAA2B,IAAjBA,EAAKrC,WAAmB0D,QAzB7B,KA4BnCd,WAAa,SAAC7C,GACZ,EAAKyB,SAASmC,KAAK,CAAE7D,GAAI,EAAKmD,WAAYlD,QAASA,EAASC,SAAS,IACrE,EAAKiD,YAAc,EACnB,EAAKM,mBA/B4B,KAkCnCrD,YAAc,SAACJ,EAAYC,GACzB,IAAM6D,EAAW,EAAKC,UAAU/D,GAChC,EAAK0B,SAASoC,GAAd,2BAA+B,EAAKpC,SAASoC,IAA7C,IAAwD7D,QAASA,IACjE,EAAKwD,mBArC4B,KAwCnCxB,YAAc,SAACjC,GACb,IAAM8D,EAAW,EAAKpC,SAASqC,WAAU,SAACC,GAAD,OAAOA,EAAEhE,KAAOA,KACrD,EAAKiE,QAAQH,KACf,EAAKpC,SAASoC,GAAU5D,SAAW,EAAKwB,SAASoC,GAAU5D,SAE7D,EAAKuD,mBA7C4B,KAgDnC7B,eAAiB,SAACsC,EAAgBxC,GAChC,EAAKA,SAAW,EAAKA,SAASC,KAAI,SAACY,GACjC,OAAIb,EAASC,KAAI,SAACY,GAAD,OAAUA,EAAKvC,MAAImE,SAAS5B,EAAKvC,IACzC,2BAAKuC,GAAZ,IAAkBrC,SAAUgE,IAEvB3B,KAET,EAAKkB,mBAvD4B,KA0DnCvB,cAAgB,SAAClC,GACf,IAAM8D,EAAW,EAAKC,UAAU/D,GAC5B,EAAKiE,QAAQH,IACf,EAAKM,eAAeN,GAEtB,EAAKL,mBA/D4B,KAkEnClE,uBAAyB,WACvB,EAAKmC,SAAW,EAAKA,SAASY,QAAO,SAACC,GAAD,OAA2B,IAAjBA,EAAKrC,WACpD,EAAKuD,mBApE4B,KAuEnCM,UAAY,SAAC/D,GACX,OAAO,EAAK0B,SAASqC,WAAU,SAACxB,GAAD,OAAUA,EAAKvC,KAAOA,MAxEpB,KA2EnCiE,QAAU,SAACH,GACT,OAAqB,IAAdA,GA5E0B,KA+EnCM,eAAiB,SAACN,GAChB,EAAKpC,SAAS2C,OAAOP,EAAU,IAhFE,MACAQ,KAAKlB,mBAAqB,GAAnD1B,EADyB,EACzBA,SAAUyB,EADe,EACfA,WAClBmB,KAAK5C,SAAWA,GAAY,GAC5B4C,KAAKnB,WAAaA,GAAc,EAChCoB,YAAeD,KAAM,CACnB5C,SAAU8C,IACV1B,WAAY2B,IACZrE,YAAaqE,IACbxC,YAAawC,IACb7C,eAAgB6C,IAChBvC,cAAeuC,IACflF,uBAAwBkF,MAE1BH,KAAK1B,UAAYA,GCXN8B,EALb,aAAe,yBAFfrF,eAEc,EACZiF,KAAKjF,UAAY,IAAI6D,EAAUoB,OCGnCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAaC,SAAd,CAAuBhE,MAAO,IAAI4D,EAAlC,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.2655d608.chunk.js","sourcesContent":["import React from 'react';\nimport RootStore from '../stores/RootStore';\n\nconst StoreContext = React.createContext<RootStore | undefined>(undefined);\n\nexport default StoreContext;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { IRootStore } from '../../types/models/index';\n\nconst makeTodoCountTag = (count: number): React.ReactElement => {\n  const tagDescription = count > 1 ? ' items left' : ' item left';\n\n  return (\n    <>\n      <strong>{count}</strong>\n      {tagDescription}\n    </>\n  );\n};\n\nconst TodoFooter = ({ store: rootStore }: { store: IRootStore }): React.ReactElement => {\n  const { getLeftItems, removeCompletedContent } = rootStore.todoStore;\n  const leftItems = makeTodoCountTag(getLeftItems());\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{leftItems}</span>\n      <ul className=\"filters\">\n        <li>\n          <a href=\"/\" className={'all'}>\n            All\n          </a>\n        </li>{' '}\n        <li>\n          <a href=\"/active\" className={'active'}>\n            Active\n          </a>\n        </li>{' '}\n        <li>\n          <a href=\"/completed\" className={'completed'}>\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button className=\"clear-completed\" onClick={removeCompletedContent}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nexport default observer(TodoFooter);\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { ITodoItem } from '../../types/models/index';\nimport classNames from 'classnames';\n\nfunction TodoItem({ id, content, checked, onClickHandler, editContent }: ITodoItem): React.ReactElement {\n  const [editStatus, setEditStatus] = useState(false);\n  const [itemContent, setItemContent] = useState(content);\n  let itemElement;\n\n  const onDoubleClickHandler = () => {\n    setEditStatus((prev) => !prev);\n  };\n\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setItemContent(e.target?.value);\n  };\n\n  const onBlurHandler = () => {\n    setEditStatus((prev) => !prev);\n    editContent(id, itemContent);\n  };\n\n  const onKeyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e?.code === 'Enter') {\n      setEditStatus((prev) => !prev);\n      editContent(id, itemContent);\n    }\n  };\n\n  if (editStatus) {\n    itemElement = (\n      <input\n        className={classNames({ edit: editStatus })}\n        type=\"text\"\n        autoFocus={true}\n        value={itemContent}\n        onChange={onChangeHandler}\n        onBlur={onBlurHandler}\n        onKeyDown={onKeyDownHandler}\n      />\n    );\n  } else {\n    itemElement = (\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" checked={checked} readOnly />\n        <label onDoubleClick={onDoubleClickHandler}>{content}</label>\n        <button className=\"destroy\" />\n      </div>\n    );\n  }\n\n  return (\n    <li className={classNames({ completed: checked }, { editing: editStatus })} onClick={(e) => onClickHandler(e, id)}>\n      {itemElement}\n    </li>\n  );\n}\n\nexport default observer(TodoItem);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport TodoItem from '../TodoItem';\nimport { ITodoList } from '../../types/models/index';\n\nconst TodoList = ({ todoList, onClickHandler, editContent }: ITodoList): React.ReactElement => {\n  return (\n    <>\n      <ul className=\"todo-list\">\n        {todoList.map(({ id, content, checked }) => {\n          return (\n            <TodoItem\n              key={id}\n              id={id}\n              content={content}\n              checked={checked}\n              onClickHandler={onClickHandler}\n              editContent={editContent}\n            />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default observer(TodoList);\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { ITodoContext } from '../../types/models/index';\n\nconst TodoToggleAllButton = ({\n  toggleAllCheck,\n  selectedTodolist,\n}: {\n  toggleAllCheck: (check: boolean, todoList: ITodoContext[]) => void;\n  selectedTodolist: ITodoContext[];\n}): React.ReactElement => {\n  const [checkToggleAll, setCheckToggleAll] = useState<boolean>(false);\n  const toggleAllHandler = () => {\n    setCheckToggleAll((prev) => !prev);\n    toggleAllCheck(checkToggleAll, selectedTodolist);\n  };\n\n  return (\n    <>\n      <input\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n        checked={checkToggleAll}\n        onChange={toggleAllHandler}\n        // defaultChecked={checkToggleAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </>\n  );\n};\n\nexport default observer(TodoToggleAllButton);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { IRootStore, ITodoContext } from '../../types/models/index';\nimport TodoList from '../TodoList';\nimport TodoToggleAllButton from '../TodoToggleAllButton';\n\nconst todoListFilter = (todoList: ITodoContext[]): ITodoContext[] => {\n  const pathname = window.location.pathname;\n  const selectedTodolist = todoList;\n\n  switch (pathname) {\n    case '/':\n      return selectedTodolist;\n    case '/active':\n      return selectedTodolist.filter((item) => item.checked === false);\n    case '/completed':\n      return selectedTodolist.filter((item) => item.checked === true);\n  }\n  return selectedTodolist;\n};\n\nconst TodoContent = ({ store: rootStore }: { store: IRootStore }): React.ReactElement => {\n  const { todoList, toggleCheck, removeContent, toggleAllCheck, editContent } = rootStore.todoStore;\n  const selectedTodolist = todoListFilter(todoList);\n\n  const onClickHandler = (e: React.MouseEvent, id: number) => {\n    const currentTarget = e.target as HTMLElement;\n\n    if (currentTarget.classList.contains('toggle')) {\n      toggleCheck(id);\n    }\n    if (currentTarget.classList.contains('destroy')) {\n      removeContent(id);\n    }\n  };\n\n  return (\n    <main className=\"main\">\n      <TodoToggleAllButton toggleAllCheck={toggleAllCheck} selectedTodolist={selectedTodolist} />\n      <TodoList todoList={selectedTodolist} onClickHandler={onClickHandler} editContent={editContent} />\n    </main>\n  );\n};\n\nexport default observer(TodoContent);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nfunction TodoHeader(): React.ReactElement {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n    </header>\n  );\n}\n\nexport default observer(TodoHeader);\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { IRootStore } from '../../types/models/index';\n\nfunction TodoInput({ store: rootStore }: { store: IRootStore }): React.ReactElement {\n  const [content, setContent] = useState('');\n  const { addContent } = rootStore.todoStore;\n\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setContent(e.target.value);\n  };\n\n  const onKeyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.keyCode === 13) {\n      addContent(content);\n      setContent('');\n    }\n  };\n\n  return (\n    <input\n      className=\"new-todo\"\n      type=\"text\"\n      value={content}\n      onChange={onChangeHandler}\n      onKeyDown={onKeyDownHandler}\n      placeholder=\"What needs to be done?\"\n    />\n  );\n}\n\nexport default observer(TodoInput);\n","import React, { useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\n// import classNames from 'classnames';\n\nimport StoreContext from '../../contexts/stores';\nimport TodoFooter from '../TodoFooter';\nimport TodoList from '../TodoContent';\nimport TodoHeader from '../TodoHeader';\nimport TodoInput from '../TodoInput';\nimport { IRootStore } from '../../types/models/index';\n\nfunction TodoApp(): React.ReactElement {\n  const rootStore: IRootStore = useContext(StoreContext) as IRootStore;\n\n  return (\n    <section>\n      <TodoHeader />\n      <TodoInput store={rootStore} />\n      <TodoList store={rootStore} />\n      <TodoFooter store={rootStore} />\n    </section>\n  );\n}\n\nexport default observer(TodoApp);\n","import { action, makeObservable, observable } from 'mobx';\nimport { ITodoContext } from '../types/models';\nimport { IRootStore, ILocalStorage } from '../types/models/index';\n\nclass TodoStore {\n  rootStore: IRootStore;\n  todoList: ITodoContext[];\n  increaseId: number;\n\n  constructor(rootStore: IRootStore) {\n    const { todoList, increaseId } = this.getLocalStorage() || {};\n    this.todoList = todoList || [];\n    this.increaseId = increaseId || 0;\n    makeObservable(this, {\n      todoList: observable,\n      addContent: action,\n      editContent: action,\n      toggleCheck: action,\n      toggleAllCheck: action,\n      removeContent: action,\n      removeCompletedContent: action,\n    });\n    this.rootStore = rootStore;\n  }\n\n  private getLocalStorage = (): ILocalStorage => {\n    return JSON.parse(localStorage.getItem('todoList') as string);\n  };\n\n  private setLocalStorage = (): void => {\n    localStorage.setItem('todoList', JSON.stringify({ todoList: this.todoList, increaseId: this.increaseId }));\n  };\n\n  getLeftItems = (): number => {\n    return this.todoList.filter((item) => item.checked === false).length;\n  };\n\n  addContent = (content: string): void => {\n    this.todoList.push({ id: this.increaseId, content: content, checked: false });\n    this.increaseId += 1;\n    this.setLocalStorage();\n  };\n\n  editContent = (id: number, content: string): void => {\n    const targetId = this.findIndex(id);\n    this.todoList[targetId] = { ...this.todoList[targetId], content: content };\n    this.setLocalStorage();\n  };\n\n  toggleCheck = (id: number): void => {\n    const targetId = this.todoList.findIndex((v) => v.id === id);\n    if (this.checkId(targetId)) {\n      this.todoList[targetId].checked = !this.todoList[targetId].checked;\n    }\n    this.setLocalStorage();\n  };\n\n  toggleAllCheck = (check: boolean, todoList: ITodoContext[]): void => {\n    this.todoList = this.todoList.map((item) => {\n      if (todoList.map((item) => item.id).includes(item.id)) {\n        return { ...item, checked: !check };\n      }\n      return item;\n    });\n    this.setLocalStorage();\n  };\n\n  removeContent = (id: number): void => {\n    const targetId = this.findIndex(id);\n    if (this.checkId(targetId)) {\n      this.removeTodoItem(targetId);\n    }\n    this.setLocalStorage();\n  };\n\n  removeCompletedContent = (): void => {\n    this.todoList = this.todoList.filter((item) => item.checked === false);\n    this.setLocalStorage();\n  };\n\n  findIndex = (id: number): number => {\n    return this.todoList.findIndex((item) => item.id === id);\n  };\n\n  checkId = (targetId: number): boolean => {\n    return targetId !== -1;\n  };\n\n  removeTodoItem = (targetId: number): void => {\n    this.todoList.splice(targetId, 1);\n  };\n}\n\nexport default TodoStore;\n","import { ITodoStore } from '../types/models/index';\nimport TodoStore from './TodoStore';\n\nclass RootStore {\n  todoStore: ITodoStore;\n\n  constructor() {\n    this.todoStore = new TodoStore(this);\n  }\n}\n\nexport default RootStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TodoApp from './component/TodoApp';\nimport StoreContext from './contexts/stores';\n\nimport 'todomvc-common/base.css';\nimport 'todomvc-app-css/index.css';\nimport RootStore from './stores/RootStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreContext.Provider value={new RootStore()}>\n      <TodoApp />\n    </StoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}