{"version":3,"sources":["contexts/stores.ts","component/TodoFooter/TodoFooter.tsx","component/TodoItem/TodoItem.tsx","component/TodoList/TodoList.tsx","component/TodoToggleAllButton/TodoToggleAllButton.tsx","component/TodoContent/TodoContent.tsx","component/TodoHeader/TodoHeader.tsx","component/TodoInput/TodoInput.tsx","component/TodoApp/TodoApp.tsx","stores/TodoStore.tsx","stores/RootStore.tsx","index.tsx"],"names":["StoreContext","React","createContext","undefined","observer","store","todoStore","getLeftItems","removeCompletedContent","leftItems","count","tagDescription","makeTodoCountTag","className","href","onClick","id","content","checked","onClickHandler","e","type","todoList","map","toggleAllCheck","useState","checkToggleAll","setCheckToggleAll","onChange","prev","htmlFor","toggleCheck","removeContent","selectedTodolist","window","location","pathname","filter","item","todoListFilter","currentTarget","target","classList","contains","rootStore","setContent","addContent","value","onKeyDown","code","placeholder","useContext","TodoStore","increaseId","getLocalStorage","JSON","parse","localStorage","getItem","setLocalStorage","setItem","stringify","length","push","targetId","findIndex","v","checkId","check","removeTodoItem","splice","this","makeObservable","observable","action","RootStore","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.7de85c25.chunk.js","sourcesContent":["import React from 'react';\nimport RootStore from '../stores/RootStore';\n\nconst StoreContext = React.createContext<RootStore | undefined>(undefined);\n\nexport default StoreContext;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { IRootStore } from '../../types/models/index';\n\nconst makeTodoCountTag = (count: number): React.ReactElement => {\n  const tagDescription = count > 1 ? ' items left' : ' item left';\n\n  return (\n    <>\n      <strong>{count}</strong>\n      {tagDescription}\n    </>\n  );\n};\n\nconst TodoFooter = ({ store: rootStore }: { store: IRootStore }): React.ReactElement => {\n  const { getLeftItems, removeCompletedContent } = rootStore.todoStore;\n  const leftItems = makeTodoCountTag(getLeftItems());\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{leftItems}</span>\n      <ul className=\"filters\">\n        <li>\n          <a href=\"/\" className={'all'}>\n            All\n          </a>\n        </li>{' '}\n        <li>\n          <a href=\"/active\" className={'active'}>\n            Active\n          </a>\n        </li>{' '}\n        <li>\n          <a href=\"/completed\" className={'completed'}>\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button className=\"clear-completed\" onClick={removeCompletedContent}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nexport default observer(TodoFooter);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { ITodoItem } from '../../types/models/index';\n\nfunction TodoItem({ id, content, checked, onClickHandler }: ITodoItem): React.ReactElement {\n  return (\n    <li className={checked ? 'completed' : ''} onClick={(e) => onClickHandler(e, id)}>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" checked={checked} />\n        <label>{content}</label>\n        <button className=\"destroy\" />\n      </div>\n    </li>\n  );\n}\n\nexport default observer(TodoItem);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport TodoItem from '../TodoItem';\nimport { ITodoList } from '../../types/models/index';\n\nconst TodoList = ({ todoList, onClickHandler }: ITodoList): React.ReactElement => {\n  return (\n    <>\n      <ul className=\"todo-list\">\n        {todoList.map(({ id, content, checked }) => {\n          return <TodoItem key={id} id={id} content={content} checked={checked} onClickHandler={onClickHandler} />;\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default observer(TodoList);\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\n\nconst TodoToggleAllButton = ({ toggleAllCheck }: { toggleAllCheck: (check: boolean) => void }): React.ReactElement => {\n  const [checkToggleAll, setCheckToggleAll] = useState<boolean>(false);\n  const toggleAllHandler = () => {\n    setCheckToggleAll((prev) => !prev);\n    toggleAllCheck(checkToggleAll);\n  };\n\n  return (\n    <>\n      <input\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n        checked={checkToggleAll}\n        onChange={toggleAllHandler}\n        // defaultChecked={checkToggleAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </>\n  );\n};\n\nexport default observer(TodoToggleAllButton);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { IRootStore, ITodoContext } from '../../types/models/index';\nimport TodoList from '../TodoList';\nimport TodoToggleAllButton from '../TodoToggleAllButton';\n\nconst todoListFilter = (todoList: ITodoContext[]): ITodoContext[] => {\n  const pathname = window.location.pathname;\n  const selectedTodolist = todoList;\n\n  switch (pathname) {\n    case '/':\n      return selectedTodolist;\n    case '/active':\n      return selectedTodolist.filter((item) => item.checked === false);\n    case '/completed':\n      return selectedTodolist.filter((item) => item.checked === true);\n  }\n  return selectedTodolist;\n};\n\nconst TodoContent = ({ store: rootStore }: { store: IRootStore }): React.ReactElement => {\n  const { todoList, toggleCheck, removeContent, toggleAllCheck } = rootStore.todoStore;\n  const selectedTodolist = todoListFilter(todoList);\n\n  const onClickHandler = (e: React.MouseEvent, id: number) => {\n    const currentTarget = e.target as HTMLElement;\n\n    if (currentTarget.classList.contains('toggle')) {\n      toggleCheck(id);\n    }\n    if (currentTarget.classList.contains('destroy')) {\n      removeContent(id);\n    }\n  };\n\n  return (\n    <section className=\"main\">\n      <TodoToggleAllButton toggleAllCheck={toggleAllCheck} />\n      <TodoList todoList={selectedTodolist} onClickHandler={onClickHandler} />\n    </section>\n  );\n};\n\nexport default observer(TodoContent);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nfunction TodoHeader(): React.ReactElement {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n    </header>\n  );\n}\n\nexport default observer(TodoHeader);\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { IRootStore } from '../../types/models/index';\n\nfunction TodoInput({ store: rootStore }: { store: IRootStore }): React.ReactElement {\n  const [content, setContent] = useState('');\n  const { addContent } = rootStore.todoStore;\n\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setContent(e.target.value);\n  };\n\n  const onKeyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === 'Enter') {\n      addContent(content);\n      setContent('');\n    }\n  };\n\n  return (\n    <input\n      className=\"new-todo\"\n      type=\"text\"\n      value={content}\n      onChange={onChangeHandler}\n      onKeyDown={onKeyDownHandler}\n      placeholder=\"What needs to be done?\"\n    />\n  );\n}\n\nexport default observer(TodoInput);\n","import React, { useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\n// import classNames from 'classnames';\n\nimport StoreContext from '../../contexts/stores';\nimport TodoFooter from '../TodoFooter';\nimport TodoList from '../TodoContent';\nimport TodoHeader from '../TodoHeader';\nimport TodoInput from '../TodoInput';\nimport { IRootStore } from '../../types/models/index';\n\nfunction TodoApp(): React.ReactElement {\n  const rootStore: IRootStore = useContext(StoreContext) as IRootStore;\n\n  return (\n    <section>\n      <TodoHeader />\n      <TodoInput store={rootStore} />\n      <TodoList store={rootStore} />\n      <TodoFooter store={rootStore} />\n    </section>\n  );\n}\n\nexport default observer(TodoApp);\n","import { action, makeObservable, observable } from 'mobx';\nimport { ITodoContext } from '../types/models';\nimport { IRootStore, ILocalStorage } from '../types/models/index';\n\nclass TodoStore {\n  rootStore: IRootStore;\n  todoList: ITodoContext[];\n  increaseId: number;\n\n  constructor(rootStore: IRootStore) {\n    const { todoList, increaseId } = this.getLocalStorage() || {};\n    this.todoList = todoList || [];\n    this.increaseId = increaseId || 0;\n    makeObservable(this, {\n      todoList: observable,\n      addContent: action,\n      toggleCheck: action,\n      toggleAllCheck: action,\n      removeContent: action,\n      removeCompletedContent: action,\n    });\n    this.rootStore = rootStore;\n  }\n\n  private getLocalStorage = (): ILocalStorage => {\n    return JSON.parse(localStorage.getItem('todoList') as string);\n  };\n\n  private setLocalStorage = (): void => {\n    localStorage.setItem('todoList', JSON.stringify({ todoList: this.todoList, increaseId: this.increaseId }));\n  };\n\n  getLeftItems = (): number => {\n    return this.todoList.filter((item) => item.checked === false).length;\n  };\n\n  addContent = (content: string): void => {\n    this.todoList.push({ id: this.increaseId, content: content, checked: false });\n    this.increaseId += 1;\n    this.setLocalStorage();\n  };\n\n  toggleCheck = (id: number): void => {\n    const targetId = this.todoList.findIndex((v) => v.id === id);\n    if (this.checkId(targetId)) {\n      this.todoList[targetId].checked = !this.todoList[targetId].checked;\n    }\n    this.setLocalStorage();\n  };\n\n  toggleAllCheck = (check: boolean): void => {\n    this.todoList = this.todoList.map((item) => ({ ...item, checked: !check }));\n    this.setLocalStorage();\n  };\n\n  removeContent = (id: number): void => {\n    const targetId = this.findIndex(id);\n    if (this.checkId(targetId)) {\n      this.removeTodoItem(targetId);\n    }\n    this.setLocalStorage();\n  };\n\n  removeCompletedContent = (): void => {\n    this.todoList = this.todoList.filter((item) => item.checked === false);\n    this.setLocalStorage();\n  };\n\n  findIndex = (id: number): number => {\n    return this.todoList.findIndex((item) => item.id === id);\n  };\n\n  checkId = (targetId: number): boolean => {\n    return targetId !== -1;\n  };\n\n  removeTodoItem = (targetId: number): void => {\n    this.todoList.splice(targetId, 1);\n  };\n}\n\nexport default TodoStore;\n","import { ITodoStore } from '../types/models/index';\nimport TodoStore from './TodoStore';\n\nclass RootStore {\n  todoStore: ITodoStore;\n\n  constructor() {\n    this.todoStore = new TodoStore(this);\n  }\n}\n\nexport default RootStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TodoApp from './component/TodoApp';\nimport StoreContext from './contexts/stores';\n\nimport 'todomvc-common/base.css';\nimport 'todomvc-app-css/index.css';\nimport RootStore from './stores/RootStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreContext.Provider value={new RootStore()}>\n      <TodoApp />\n    </StoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}